#!/bin/bash

# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.
usage() {
    err "Invalid usage. Usage: "
    err "\t$0 init"
    err "\t$0 mount <mount dir> <json params>"
    err "\t$0 unmount <mount dir>"
    exit 1
}

err() {
    echo -ne $* 1>&2
}

log() {
    echo -ne $* >&1
}

ismounted() {
    MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
    if [ "${MOUNT}" == "${MNTPATH}" ]; then
        echo "1"
    else
        echo "0"
    fi
}

domount() {
    MNTPATH=$1

    WEBDAV_SERVER=$(echo $2 | jq -r '.server')
    USERNAME=$(echo $2 | jq -re '.username') || USERNAME=
    PASSWORD=$(echo $2 | jq -re '.password') || PASSWORD=
    K8S_SECRET_NAMESPACE=$(echo $2 | jq -re '.secretNamespace') || K8S_SECRET_NAMESPACE=
    K8S_SECRET_NAME=$(echo $2 | jq -re '.secretName') || K8S_SECRET_NAME=

    if [ -n "$USERNAME" ] && [ -z "$PASSWORD" ]; then
	PASSWORD=$(kubectl -n ${K8S_SECRET_NAMESPACE:-default} get secret ${K8S_SECRET_NAME:-webdav} --no-headers -o=custom-columns=NAME:.data.webdav-password 2>/dev/null | sed 's/^<none>$//' | base64 --decode) || PASSWORD=
    fi

    if [ -n "$K8S_SECRET_NAME" ]; then
	CA_CERT=$(kubectl -n ${K8S_SECRET_NAMESPACE:-default} get secret ${K8S_SECRET_NAME} --no-headers -o=custom-columns=NAME:.data.webdav-ca-cert | sed 's/^<none>$//' 2>/dev/null | base64 --decode) || CA_CERT=
	SERVER_CERT=$(kubectl -n ${K8S_SECRET_NAMESPACE:-default} get secret ${K8S_SECRET_NAME} --no-headers -o=custom-columns=NAME:.data.webdav-cert 2>/dev/null | sed 's/^<none>$//' | base64 --decode) || SERVER_CERT=
    fi

    if [ -n "$CA_CERT" ] || [ -n "$SERVER_CERT" ]; then
	CONF_FILE=$(tempfile)
	CONF_ARG=",conf=$CONF_FILE"
	if [ -n "$CA_CERT" ]; then
	    CA_CERT_FILE=$(tempfile -m 644)
	    echo "$CA_CERT" > "$CA_CERT_FILE"
	    echo "trust_ca_cert $CA_CERT_FILE" >> "$CONF_FILE"
	fi
	if [ -n "$SERVER_CERT" ]; then
	    SERVER_CERT_FILE=$(tempfile -m 644)
	    echo "$SERVER_CERT" > "$SERVER_CERT_FILE"
	    echo "trust_server_cert $SERVER_CERT_FILE" >> "$CONF_FILE"
	fi
    fi

    if [ $(ismounted) -eq 1 ] ; then
        log '{"status": "Success"}'
        exit 0
    fi

    mkdir -p ${MNTPATH} &> /dev/null

    echo -e "${USERNAME:-anonymous}\n${PASSWORD:-anonymous}" | mount -t davfs -o noexec${CONF_ARG}  ${WEBDAV_SERVER} ${MNTPATH} &> /dev/null

    STATUS=$?

    [ -n "$CONF_FILE" ] && rm -f "$CONF_FILE"
    [ -n "$CA_CERT_FILE" ] && rm -f "$CA_CERT_FILE"
    [ -n "$SERVER_CERT_FILE" ] && rm -f "$SERVER_CERT_FILE"

    if [ $STATUS -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to mount ${WEBDAV_SERVER} at ${MNTPATH}\"}"
        exit 1
    fi
    log '{"status": "Success"}'
    exit 0
}

unmount() {
    MNTPATH=$1
    if [ $(ismounted) -eq 0 ] ; then
        log '{"status": "Success"}'
        exit 0
    fi

    umount ${MNTPATH} &> /dev/null
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
        exit 1
    fi

    log '{"status": "Success"}'
    exit 0
}

op=$1

if ! command -v jq >/dev/null 2>&1; then
    err "{ \"status\": \"Failure\", \"message\": \"'jq' binary not found. Please install jq package before using this driver\"}"
    exit 1
fi

if [ "$op" = "init" ]; then
    log '{"status": "Success", "capabilities": {"attach": false}}'
    exit 0
fi

if [ $# -lt 2 ]; then
    usage
fi

shift

case "$op" in
    mount)
        domount $*
        ;;
    unmount)
        unmount $*
        ;;
    *)
        log '{"status": "Not supported"}'
        exit 0
esac

exit 1
